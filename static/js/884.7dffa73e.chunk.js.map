{"version":3,"file":"static/js/884.7dffa73e.chunk.js","mappings":"2TAEAA,IAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAET,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAyBC,GAAzB,8EACGC,EAASJ,GAAAA,CAAM,CACjBK,OAAQ,MACRC,IAAI,wBAAD,OAA0BL,EAA1B,kBAA2CE,KAH/C,kBAKIC,GALJ,kEAQA,SAAeG,IAAtB,4CAAO,OAAP,oBAAO,2FACGH,EAASJ,IAAAA,IAAA,gCAAmCC,IAD/C,kBAEIG,GAFJ,kEAKA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,8EACGC,EAAQV,IAAAA,IAAA,gBAAmBS,EAAnB,oBAAiCR,IAD5C,kBAEIS,GAFJ,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BF,GAA5B,8EACGG,EAAOZ,IAAAA,IAAA,gBAAmBS,EAAnB,4BAAyCR,IADnD,kBAEIW,GAFJ,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BJ,GAA/B,8EACGG,EAAOZ,IAAAA,IAAA,gBAAmBS,EAAnB,4BAAyCR,IADnD,kBAEIW,GAFJ,oE,gJCoCP,UAxDqB,WAAO,IAAD,IACjBE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAON,EAAP,KAAcO,EAAd,MACAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,gHAEQX,EAAAA,EAAAA,IAAaM,GAFrB,gBAEPF,EAFO,EAEPA,KACRK,EAASL,GAHM,gDAKfQ,QAAQC,IAAR,MALe,yDAAH,qDAQhBF,MACC,CAACL,IAEJ,IACMQ,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,UAEtCC,EAAsDhB,EAAtDgB,MAAOC,EAA+CjB,EAA/CiB,YAAaC,EAAkClB,EAAlCkB,SAAUC,EAAwBnB,EAAxBmB,OAAQC,EAAgBpB,EAAhBoB,aAE7C,OACE,4BACE,SAACC,EAAD,CAAYC,GAAIV,EAAhB,mBACA,UAACW,EAAD,YACE,4BACE,wBAAKP,IACJC,GAAc,gBAAKO,MAAO,IAAKC,IAAG,yCAAoCR,GAAeS,IAAKV,KACzF,kDAGJ,UAACW,EAAD,YACE,4BACE,sCACA,6BAAUT,OAEXE,GAAe,6CAAqBA,EAAaQ,QAAQ,OAAW,6CACpET,GAAU,UAACU,EAAD,YACT,mCACCV,EAAOW,KAAI,gBAAG/B,EAAH,EAAGA,GAAIgC,EAAP,EAAOA,KAAP,OAAmB,wBAAcA,GAALhC,UAC/B,+CAEX,UAAC8B,EAAD,YACE,uCACA,SAAC,KAAD,CAAMP,GAAE,OAAUR,MAAO,CAACC,KAAMH,GAAhC,mBACA,SAAC,KAAD,CAAMU,GAAE,UAAaR,MAAO,CAACC,KAAMH,GAAnC,+BAKN,SAAC,KAAD,QASN,IAAMS,GAAaW,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,6CAIVH,EAAOG,EAAAA,GAAAA,GAAH,yGAMJT,EAAUS,EAAAA,GAAAA,QAAH,oFAMPL,EAAkBK,EAAAA,GAAAA,IAAH","sources":["API.js","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '5924ceef083cd26964791f4e18444300'\n\nexport async function getMovies(query) {\n    const movies = axios({\n        method: \"get\",\n        url: `search/movie?api_key=${API_KEY}&query=${query}`,\n    })\n    return movies\n}\n\nexport async function getTrending() {\n    const movies = axios.get(`movie/popular?api_key=${API_KEY}`)\n    return movies\n}\n\nexport async function getMovieByID(id) {\n    const movie = axios.get(`movie/${id}?api_key=${API_KEY}`)\n    return movie\n}\n\nexport async function getMovieCast(id) {\n    const data = axios.get(`movie/${id}/credits?api_key=${API_KEY}`)\n    return data\n}\n\nexport async function getMovieReviews(id) {\n    const data = axios.get(`movie/${id}/reviews?api_key=${API_KEY}`)\n    return data\n}","import { getMovieByID } from 'API'\nimport React from 'react'\nimport { useState } from 'react'\nimport { useEffect } from 'react'\n// import PropTypes from 'prop-types'\nimport { Outlet, useParams, Link, useLocation } from 'react-router-dom'\nimport styled from 'styled-components'\n\nconst MovieDetails = () => {\n  const { movieId } = useParams()\n  const [movie, setMovie] = useState({})\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        const { data } = await getMovieByID(movieId)\n        setMovie(data)\n      } catch (error) {\n        console.log(error)\n      }\n    }\n    fetchMovie()\n  }, [movieId])\n\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? \"/movies\";\n\n  const {title, poster_path, overview, genres, vote_average} = movie\n  \n  return (\n    <div>\n      <StyledLink to={backLinkHref}>Back</StyledLink>\n      <Section>\n        <div>\n          <h1>{title}</h1>\n          {poster_path ? <img width={340} src={`https://image.tmdb.org/t/p/w500${poster_path}`} alt={title} /> :\n            <h4>Poster is unknown</h4>}\n        </div>\n        \n        <FilmDescription>\n          <div>\n            <h2>Overview</h2>\n            <article>{overview}</article>\n          </div>\n          {vote_average ? <h2>Average rating: {vote_average.toFixed(1)}</h2> : <h3>Havent score yet</h3>}\n          {genres ? (<List>\n            <h2>Genres</h2>\n            {genres.map(({ id, name }) => (<li key={id}>{name}</li>))}\n          </List>) : <h2>Genres is unknown</h2>}\n\n          <List>\n            <h2>More info</h2>\n            <Link to={`cast`} state={{from: backLinkHref}}>Cast</Link>\n            <Link to={`reviews`} state={{from: backLinkHref}}>Reviews</Link>\n          </List>\n        </FilmDescription>\n      </Section>\n      \n      <Outlet />      \n    </div>\n  )\n}\n\n// MovieDetails.propTypes = {}\n\nexport default MovieDetails\n\nconst StyledLink = styled(Link)`\n  padding-left: 5%;\n`\n\nconst List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  list-style: none;\n  padding: 0;\n`\nconst Section = styled.section`\n  display: flex;\n  flex-direction: row;\n  padding: 0 5%;\n`\n\nconst FilmDescription = styled.div`\n  display: flex;\n  justify-content: center;\n  padding: 0 5%;\n  flex-direction: column;\n`"],"names":["axios","API_KEY","getMovies","query","movies","method","url","getTrending","getMovieByID","id","movie","getMovieCast","data","getMovieReviews","movieId","useParams","useState","setMovie","useEffect","fetchMovie","console","log","backLinkHref","useLocation","state","from","title","poster_path","overview","genres","vote_average","StyledLink","to","Section","width","src","alt","FilmDescription","toFixed","List","map","name","styled","Link"],"sourceRoot":""}